WORKING DIRECTORY (GIT DOES NOT TRACK AND INCLUDE FILE FROM HERE)
|
STAGING AREA (ANYTHING HERE, GIT TRACKS AND INCLUDES IN THE COMMIT)


Git setup and config - https://git-scm.com/book/en/v2/Appendix-C%3A-Git-Commands-Setup-and-Config
Generate gitignore - https://www.toptal.com/developers/gitignore/

git log --one-line
git config --global user.name "Imtiyaz Baig Moghal"
git config --global user.email "ImtiyazBaigMoghal@samsclub.com"
git config user.name
git add file1 file2 // goes to staging area
git add . // add all at once .. goes to staging area
git commit -m "changes" // goes to local .git folder or repo
To stage and commit - git commit -a -m "add and commit"
To view branches - git branch
To create branch - git checkout -b test
To switch - git switch test
To create and switch - git switch -c test
To delete - go to main branch, from there - git branch -D test-branch
To rename - Go into the branch, run - git branch -m renamed-test-branch
how to merge bugfix into master
git switch master
git merge bugfix -- by this you will get all commits of bugfix into master
git branch -v


--
git diff --> shows unstaged files vs latest commit on head
git diff --staged --> shows staged files vs latest commit on head
git diff --HEAD --> shows diff of unstaged+stagedFiles vs latest commit on head
git diff master..mybranch
gif diff mybranch..master
git diff master mybranch
git diff commit1 commit2
git diff commit1..commit2

git stash --> copies unstaged+staged files onto stash area and reverts them on the working directory
git stash pop --> gets most recent stash and applies them back onto the working directory and pops/deletes from stash
git stash apply --> applies, but stashed files exist so that you can switch branches and apply anywhere
git stash list --> most recent at top with 0
git stash apply stash@2 
git stash drop stash@2 
git stash clear

---
obseve what was the state and come back with latest on master
git checkout 1234567 ---> if you want to observe what was the state at this commit, run this with 7 digit commit id.. HEAD detached from master and points to this commit
git switch master
----
observe what was the state and branch off from it to a new branch
git checkout 1234567 --> HEAD detaches from current branch and points to this commit directly
git switch -c new-branch-from-here
-----
FILE BY FILE - To discard your local changes
git checkout HEAD cat.txt
git checkout -- cat.txt dog.txt
git restore dog.txt // Gets most recent commit on HEAD, discards local changes if any
git restore --source commithash dog.txt // Get specific previous commit, discards local changes if any
git restore --source HEAD~2 dog.txt // Get specific previous commit, discards local changes if any
git restore dog.txt // Gets most recent commit on HEAD, discards local changes if any

To unstage files or remove from staging area
added secret.txt into stage and if you want to unstage
git restore --stage secrets.txt

--- git reset ---just delete bad commits and go back ----
You want to go back to a specific commit in the past..
badcommit2
badcommit1
goodcommit3
goodcommit2
goodcommit1
git reset goodcommit3hash --> +MANUALLY DELETE--> so, in working directory you will have bad commits still. It will remove commits from history though, but have those bad commits in working directory
This is very helpful, if you want to commit these bad commits into a different branch...

git reset --hard goodcommit3hash --> commits gone + those bad commits would be gone from working directory too



